<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="https://purl.org/rss/1.0/modules/content/"
	xmlns:dc="https://purl.org/dc/elements/1.1/"
	xmlns:atom="https://www.w3.org/2005/Atom"
	xmlns:sy="https://purl.org/rss/1.0/modules/syndication/"
	
	>
<channel>
	<title>
	Comments on: Are JavaScript Promises swallowing your errors?	</title>
	<atom:link href="/are-es6-promises-swallowing-your-errors/feed/" rel="self" type="application/rss+xml" />
	<link>/are-es6-promises-swallowing-your-errors/</link>
	<description></description>
	<lastBuildDate>Fri, 30 Sep 2016 03:56:27 +0000</lastBuildDate>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.9.3</generator>
	<item>
		<title>
		By: Jason Sebring		</title>
		<link>/are-es6-promises-swallowing-your-errors/#comment-23558</link>

		<dc:creator><![CDATA[Jason Sebring]]></dc:creator>
		<pubDate>Fri, 30 Sep 2016 03:56:27 +0000</pubDate>
		<guid isPermaLink="false">/?p=164#comment-23558</guid>

					<description><![CDATA[You are the fucking man!

.catch(err =&#062; console.error(err.stack));

saved my ass. JESUS why didn&#039;t I know this!!!!!!]]></description>
			<content:encoded><![CDATA[<p>You are the fucking man!</p>
<p>.catch(err =&gt; console.error(err.stack));</p>
<p>saved my ass. JESUS why didn&#8217;t I know this!!!!!!</p>
]]></content:encoded>
		
			</item>
		<item>
		<title>
		By: Ben Zichettello		</title>
		<link>/are-es6-promises-swallowing-your-errors/#comment-20063</link>

		<dc:creator><![CDATA[Ben Zichettello]]></dc:creator>
		<pubDate>Fri, 20 May 2016 14:48:22 +0000</pubDate>
		<guid isPermaLink="false">/?p=164#comment-20063</guid>

					<description><![CDATA[See here before you try this with Bluebird 2.7 and up

https://bluebirdjs.com/docs/api/error-management-configuration.html#global-rejection-events]]></description>
			<content:encoded><![CDATA[<p>See here before you try this with Bluebird 2.7 and up</p>
<p><a href="https://bluebirdjs.com/docs/api/error-management-configuration.html#global-rejection-events" rel="nofollow ugc">https://bluebirdjs.com/docs/api/error-management-configuration.html#global-rejection-events</a></p>
]]></content:encoded>
		
			</item>
		<item>
		<title>
		By: Brian Hunt		</title>
		<link>/are-es6-promises-swallowing-your-errors/#comment-14443</link>

		<dc:creator><![CDATA[Brian Hunt]]></dc:creator>
		<pubDate>Tue, 08 Mar 2016 20:58:08 +0000</pubDate>
		<guid isPermaLink="false">/?p=164#comment-14443</guid>

					<description><![CDATA[See report in promises-aplus/promises-spec: https://github.com/promises-aplus/promises-spec/issues/167]]></description>
			<content:encoded><![CDATA[<p>See report in promises-aplus/promises-spec: <a href="https://github.com/promises-aplus/promises-spec/issues/167" rel="nofollow ugc">https://github.com/promises-aplus/promises-spec/issues/167</a></p>
]]></content:encoded>
		
			</item>
		<item>
		<title>
		By: Gleb Bahmutov		</title>
		<link>/are-es6-promises-swallowing-your-errors/#comment-344</link>

		<dc:creator><![CDATA[Gleb Bahmutov]]></dc:creator>
		<pubDate>Mon, 08 Jun 2015 04:03:35 +0000</pubDate>
		<guid isPermaLink="false">/?p=164#comment-344</guid>

					<description><![CDATA[Good article, while I always suggest using &lt;em&gt;.done()&lt;/em&gt; in the promise chains, see &lt;a href=&quot;https://glebbahmutov.com/blog/why-promises-need-to-be-done/&quot; rel=&quot;nofollow&quot;&gt;Why promises need to be done&lt;/a&gt;, your idea that the promises need to always throw the error might be overkill. The dynamic nature of promises means that someone can later attach error handler to a promise chain and handle an error.]]></description>
			<content:encoded><![CDATA[<p>Good article, while I always suggest using <em>.done()</em> in the promise chains, see <a href="https://glebbahmutov.com/blog/why-promises-need-to-be-done/" rel="nofollow">Why promises need to be done</a>, your idea that the promises need to always throw the error might be overkill. The dynamic nature of promises means that someone can later attach error handler to a promise chain and handle an error.</p>
]]></content:encoded>
		
			</item>
		<item>
		<title>
		By: Benjamin Gruenbaum		</title>
		<link>/are-es6-promises-swallowing-your-errors/#comment-273</link>

		<dc:creator><![CDATA[Benjamin Gruenbaum]]></dc:creator>
		<pubDate>Wed, 03 Jun 2015 18:14:07 +0000</pubDate>
		<guid isPermaLink="false">/?p=164#comment-273</guid>

					<description><![CDATA[In reply to &lt;a href=&quot;/are-es6-promises-swallowing-your-errors/#comment-253&quot;&gt;Pawel&lt;/a&gt;.

This is insane, of course you don&#039;t want to swallow errors in your code. Just think of:

&lt;code&gt;
    getCall().then(function(result){
          JSON.prase(result); // typo
    }).then(...);
&lt;/code&gt;

Would get completely suppressed and ignored at the development stage as well - and if you forget a single `.catch` your life can become a nightmare. Of course - unhandled rejection tracking doesn&#039;t kick in if you handle errors yourself anyway.]]></description>
			<content:encoded><![CDATA[<p>In reply to <a href="/are-es6-promises-swallowing-your-errors/#comment-253">Pawel</a>.</p>
<p>This is insane, of course you don&#8217;t want to swallow errors in your code. Just think of:</p>
<p><code><br />
    getCall().then(function(result){<br />
          JSON.prase(result); // typo<br />
    }).then(...);<br />
</code></p>
<p>Would get completely suppressed and ignored at the development stage as well &#8211; and if you forget a single `.catch` your life can become a nightmare. Of course &#8211; unhandled rejection tracking doesn&#8217;t kick in if you handle errors yourself anyway.</p>
]]></content:encoded>
		
			</item>
		<item>
		<title>
		By: Benjamin Gruenbaum		</title>
		<link>/are-es6-promises-swallowing-your-errors/#comment-269</link>

		<dc:creator><![CDATA[Benjamin Gruenbaum]]></dc:creator>
		<pubDate>Wed, 03 Jun 2015 18:08:15 +0000</pubDate>
		<guid isPermaLink="false">/?p=164#comment-269</guid>

					<description><![CDATA[On io.js (and soon node.js) as well as most promise libraries (like Q and When) you can do `process.on(&quot;unhandledRejection&quot;` to access errors. See https://iojs.org/api/process.html#process_event_unhandledrejection]]></description>
			<content:encoded><![CDATA[<p>On io.js (and soon node.js) as well as most promise libraries (like Q and When) you can do `process.on(&#8220;unhandledRejection&#8221;` to access errors. See <a href="https://iojs.org/api/process.html#process_event_unhandledrejection" rel="nofollow ugc">https://iojs.org/api/process.html#process_event_unhandledrejection</a></p>
]]></content:encoded>
		
			</item>
		<item>
		<title>
		By: Pawel		</title>
		<link>/are-es6-promises-swallowing-your-errors/#comment-256</link>

		<dc:creator><![CDATA[Pawel]]></dc:creator>
		<pubDate>Tue, 02 Jun 2015 13:35:25 +0000</pubDate>
		<guid isPermaLink="false">/?p=164#comment-256</guid>

					<description><![CDATA[In reply to &lt;a href=&quot;/are-es6-promises-swallowing-your-errors/#comment-254&quot;&gt;jamesknelson&lt;/a&gt;.

Showing an exception in a console, in my view, is quite obscure thing. I would prefer they didn&#039;t act that way. Especially if you notice that behaviour is different for a &#039;normal&#039; exception and exception in a promise. Anyway that&#039;s at least harmless.

Returning a &#039;pending&#039; promise is absolutely unrelated to the exception question.
When you return a promise it means you return a &#039;future&#039; value which for a time being is unknown and you should wait until that future becomes present. You can do nothing with it. It&#039;s not exist yet. However on each layer you can write some custom logic like a connection timeout.

Anyway some function receive a promise, do whith it whatever it wants and pass it further. It&#039;s not of that function concern who gave that promise and where it&#039;s going]]></description>
			<content:encoded><![CDATA[<p>In reply to <a href="/are-es6-promises-swallowing-your-errors/#comment-254">jamesknelson</a>.</p>
<p>Showing an exception in a console, in my view, is quite obscure thing. I would prefer they didn&#8217;t act that way. Especially if you notice that behaviour is different for a &#8216;normal&#8217; exception and exception in a promise. Anyway that&#8217;s at least harmless.</p>
<p>Returning a &#8216;pending&#8217; promise is absolutely unrelated to the exception question.<br />
When you return a promise it means you return a &#8216;future&#8217; value which for a time being is unknown and you should wait until that future becomes present. You can do nothing with it. It&#8217;s not exist yet. However on each layer you can write some custom logic like a connection timeout.</p>
<p>Anyway some function receive a promise, do whith it whatever it wants and pass it further. It&#8217;s not of that function concern who gave that promise and where it&#8217;s going</p>
]]></content:encoded>
		
			</item>
		<item>
		<title>
		By: jamesknelson		</title>
		<link>/are-es6-promises-swallowing-your-errors/#comment-254</link>

		<dc:creator><![CDATA[jamesknelson]]></dc:creator>
		<pubDate>Tue, 02 Jun 2015 12:01:46 +0000</pubDate>
		<guid isPermaLink="false">/?p=164#comment-254</guid>

					<description><![CDATA[In reply to &lt;a href=&quot;/are-es6-promises-swallowing-your-errors/#comment-253&quot;&gt;Pawel&lt;/a&gt;.

Interesting points you make. What do you think about the behaviour of recent browsers, where they show the exception in the console if it isn&#039;t handled by a rejection handler? This isn&#039;t swallowing, but it still follows the promises spec.

What about the case where you define your own promise using `new Promise`, but never actually call `resolve` or `reject`? This breaks the guarantee which you talk about.]]></description>
			<content:encoded><![CDATA[<p>In reply to <a href="/are-es6-promises-swallowing-your-errors/#comment-253">Pawel</a>.</p>
<p>Interesting points you make. What do you think about the behaviour of recent browsers, where they show the exception in the console if it isn&#8217;t handled by a rejection handler? This isn&#8217;t swallowing, but it still follows the promises spec.</p>
<p>What about the case where you define your own promise using `new Promise`, but never actually call `resolve` or `reject`? This breaks the guarantee which you talk about.</p>
]]></content:encoded>
		
			</item>
		<item>
		<title>
		By: Pawel		</title>
		<link>/are-es6-promises-swallowing-your-errors/#comment-253</link>

		<dc:creator><![CDATA[Pawel]]></dc:creator>
		<pubDate>Tue, 02 Jun 2015 08:51:21 +0000</pubDate>
		<guid isPermaLink="false">/?p=164#comment-253</guid>

					<description><![CDATA[I&#039;m afraid you don&#039;t understand purpose of promises. It should &quot;swallow&quot; errors according to the spec.

&quot;If either onFulfilled or onRejected throws an exception e, promise must be rejected with e as the reason.&quot;

The reason of that behaviour is simple. In any point you are absolutely sure that either onFulfilled or onRejected will be called.

&lt;code&gt;

var p = Promise.resolve(&#039;promised value&#039;).then(function() {
    throw new Error(&#039;error&#039;);
});

var p = p.then(function(){ return &#039;OK&#039;;});
var p = p.then(function(){ return &#039;OK&#039;;});
//any number of chains

p.then(
    function(r){console.log(&#039;done: &#039;, r);}, 
    function(e){console.log(&#039;an error happened: &#039;, e);}
);

&lt;/code&gt;

Like if you do GUI, which trigger a chain of a network operations. You don&#039;t want to know about links of that chain. But you want to show user if operation was successful. And you want to be sure if something went wrong your code would be notified. So you dont want that chain to be broken in a middle.]]></description>
			<content:encoded><![CDATA[<p>I&#8217;m afraid you don&#8217;t understand purpose of promises. It should &#8220;swallow&#8221; errors according to the spec.</p>
<p>&#8220;If either onFulfilled or onRejected throws an exception e, promise must be rejected with e as the reason.&#8221;</p>
<p>The reason of that behaviour is simple. In any point you are absolutely sure that either onFulfilled or onRejected will be called.</p>
<p><code></p>
<p>var p = Promise.resolve('promised value').then(function() {<br />
    throw new Error('error');<br />
});</p>
<p>var p = p.then(function(){ return 'OK';});<br />
var p = p.then(function(){ return 'OK';});<br />
//any number of chains</p>
<p>p.then(<br />
    function(r){console.log('done: ', r);},<br />
    function(e){console.log('an error happened: ', e);}<br />
);</p>
<p></code></p>
<p>Like if you do GUI, which trigger a chain of a network operations. You don&#8217;t want to know about links of that chain. But you want to show user if operation was successful. And you want to be sure if something went wrong your code would be notified. So you dont want that chain to be broken in a middle.</p>
]]></content:encoded>
		
			</item>
		<item>
		<title>
		By: Les Orchard		</title>
		<link>/are-es6-promises-swallowing-your-errors/#comment-247</link>

		<dc:creator><![CDATA[Les Orchard]]></dc:creator>
		<pubDate>Mon, 01 Jun 2015 14:45:45 +0000</pubDate>
		<guid isPermaLink="false">/?p=164#comment-247</guid>

					<description><![CDATA[In reply to &lt;a href=&quot;/are-es6-promises-swallowing-your-errors/#comment-241&quot;&gt;Šime Vidas&lt;/a&gt;.

The delay is because Firefox uses the JS garbage collection process to find orphaned Promises resolved with errors. I forget off the top of my head, but I think you can force that process to kick in earlier / more often when you&#039;re debugging]]></description>
			<content:encoded><![CDATA[<p>In reply to <a href="/are-es6-promises-swallowing-your-errors/#comment-241">Šime Vidas</a>.</p>
<p>The delay is because Firefox uses the JS garbage collection process to find orphaned Promises resolved with errors. I forget off the top of my head, but I think you can force that process to kick in earlier / more often when you&#8217;re debugging</p>
]]></content:encoded>
		
			</item>
	</channel>
</rss>
